@page "/UploadDocument"


<h3>Upload Document</h3>
<EditForm Model="Model" OnSubmit="Upload">
    <RadzenCard Style="width:50%; margin-bottom: 20px; height:500px;">
        <div class="row">
            <InputFile @bind-Value="FileByteArray" OnChange="OnInputFileChange"/>
        </div>
        <div class="row">
            <RadzenLabel Text="Document name" />
            <RadzenTextBox @bind-Value="Model.DocumentName"></RadzenTextBox>
        </div>
        <div class="row">
            <RadzenLabel Text="Date:" />
            <RadzenDatePicker @bind-Value=Model.UploadDate DateFormat="yyyy-MM-dd" Name="DateSelect" />

        </div>
        <div class="row">
            <RadzenLabel Text="Contract type:" />
            <RadzenDropDown @bind-Value="DocumentType" Data="DocumentTypes" Placeholder="Select contract type" Name="TypeSelect"></RadzenDropDown>

        </div>

        <div class="row">
            <RadzenCard Style="width:50%; border:none; ">
                <div class="tags">
                    <RadzenLabel Text="Add Tags:" />
                    <RadzenTextBox Placeholder="Tag" @bind-Value="Tag.Tag"></RadzenTextBox>
                    <RadzenButton Text="Add Tag" Icon="add" Click="AddTag"></RadzenButton>
                </div>
                <div class="tags" style="display: flex">
                    <RadzenListBox @bind-Value="Tag" Data="Model.Tags" TextProperty="Tag"></RadzenListBox>
                </div>
            </RadzenCard>
        </div>
        <div class="row">
            <button type="submit">Upload</button>
        </div>
    </RadzenCard>
</EditForm>

    @code {


        public DocumentFile Model { get; set; } = new DocumentFile();

        public List<DocumentType> DocumentTypes { get; set; } = new List<DocumentType>();

        public MetadataTag Tag { get; set; } = new MetadataTag();

        public DocumentType DocumentType  { get; set; }

        public DocumentPostDTO PostDTO { get; set; } = new DocumentPostDTO();

        public byte[] FileByteArray { get; set; }




        [Inject]
        private IDoctrimAPIService DoctrimAPIService { get; set; }

        protected async override Task OnInitializedAsync()
        {
            DocumentTypes = (await DoctrimAPIService.GetDocumentTypes()).ToList();

        }

        public void AddTag()
        {
            Model.Tags.Add(Tag);
            Tag = new MetadataTag();
        }

        public async Task Upload()
        {
            //Changes the document to a byte array
            var file = selectedFiles[0];
            Stream stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();

            FileByteArray = ms.ToArray();


            //assigns unique identifier to document
            Model.UniqueId = Guid.NewGuid();
            Model.TypeGuid = DocumentType.UniqueId;

            //sends object through POST method
            PostDTO.DocumentFile = Model;
            PostDTO.FileByteArray = FileByteArray;
            await DoctrimAPIService.PostDocumentFile(PostDTO);
        }






        private IReadOnlyList<IBrowserFile> selectedFiles;
        private void OnInputFileChange(InputFileChangeEventArgs e)
        {
            selectedFiles = e.GetMultipleFiles();
            StateHasChanged();
        }

    }
    
